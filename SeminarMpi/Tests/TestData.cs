using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SeminarMpi.Tests
{
	public class TestData
	{
		public const int n = 10;

		public static double[,] A => new double[,]
		{
			{ 8.9156,    0.4590,    0.0588,    0.5776,    0.7118,    0.7423,    0.4389,    0.4353,    0.4929,    0.7223 },
			{ 0.4590,    7.5366,    0.4276,    0.3282,    0.5277,    0.4274,    0.2498,    0.7622,    0.4987,    0.8953 },
			{ 0.0588,    0.4276,    6.4145,    0.4144,    0.5954,    0.6196,    0.3257,    0.5084,    0.6342,    0.5270 },
			{ 0.5776,    0.3282,    0.4144,    7.7576,    0.6609,    0.9212,    0.8040,    0.2146,    0.5077,    0.3928 },
			{ 0.7118,    0.5277,    0.5954,    0.6609,    9.0882,    0.5096,    0.3434,    0.6139,    0.7590,    0.5276 },
			{ 0.7423,    0.4274,    0.6196,    0.9212,    0.5096,   10.5523,    0.4885,    0.7861,    0.5294,    0.7933 },
			{ 0.4389,    0.2498,    0.3257,    0.8040,    0.3434,    0.4885,    7.5277,    0.6574,    0.4020,    0.2763 },
			{ 0.4353,    0.7622,    0.5084,    0.2146,    0.6139,    0.7861,    0.6574,    7.5142,    0.3528,    0.6254 },
			{ 0.4929,    0.4987,    0.6342,    0.5077,    0.7590,    0.5294,    0.4020,    0.3528,    7.8487,    0.3035 },
			{ 0.7223,    0.8953,    0.5270,    0.3928,    0.5276,    0.7933,    0.2763,    0.6254,    0.3035,    9.6122 }
		};

		/// <summary>
		/// The inverse of the diagonal of A
		/// </summary>
		public static double[] invD => new double[]
		{
			0.1121629503342456, 0.13268582650001326, 0.15589679632083561, 0.12890584716922759, 0.11003278977135186, 0.094766069956312829, 0.13284270095779588, 0.1330813659471401, 0.12740963471657726, 0.10403445621189739
		};

		/// <summary>
		/// Solution of A * x = y
		/// </summary>
		public static double[] x => new double[]
		{
			2.6621, 3.5825, 0.8965, 1.6827, 0.9386, 1.6096, 2.0193, 2.7428, 0.2437, 2.7637
		};

		/// <summary>
		/// y = A * x
		/// </summary>
		public static double[] y => new double[]
		{
			32.46268139, 35.53147830, 13.35561918, 21.66314277, 18.80200620, 28.54010573, 22.68216892, 30.29962567, 10.61705815, 36.94824798
		};

		/// <summary>
		/// z = 2*x+3*y
		/// </summary>
		public static double[] z => new double[]
		{
			102.71224417, 113.75943490, 41.859857540, 68.354828310, 58.283218600, 88.839517190, 72.085106760, 96.384477010, 32.338574450, 116.37214394
		};

		public const double xDotY = 559.33119227565908;

		public static double[,] GetSubA(int rank)
		{
			if (rank == 0)
			{
				return new double[,]
				{
					{ 8.9156,    0.4590,    0.0588,    0.5776,    0.7118,    0.7423,    0.4389,    0.4353,    0.4929,    0.7223 },
					{ 0.4590,    7.5366,    0.4276,    0.3282,    0.5277,    0.4274,    0.2498,    0.7622,    0.4987,    0.8953 },
					{ 0.0588,    0.4276,    6.4145,    0.4144,    0.5954,    0.6196,    0.3257,    0.5084,    0.6342,    0.5270 }
				};
			}
			else if (rank == 1)
			{
				return new double[,]
				{
					{ 0.5776,    0.3282,    0.4144,    7.7576,    0.6609,    0.9212,    0.8040,    0.2146,    0.5077,    0.3928 },
					{ 0.7118,    0.5277,    0.5954,    0.6609,    9.0882,    0.5096,    0.3434,    0.6139,    0.7590,    0.5276 },
					{ 0.7423,    0.4274,    0.6196,    0.9212,    0.5096,   10.5523,    0.4885,    0.7861,    0.5294,    0.7933 }
				};
			}
			else if (rank == 2)
			{
				return new double[,]
				{
					{ 0.4389,    0.2498,    0.3257,    0.8040,    0.3434,    0.4885,    7.5277,    0.6574,    0.4020,    0.2763 },
					{ 0.4353,    0.7622,    0.5084,    0.2146,    0.6139,    0.7861,    0.6574,    7.5142,    0.3528,    0.6254 },
					{ 0.4929,    0.4987,    0.6342,    0.5077,    0.7590,    0.5294,    0.4020,    0.3528,    7.8487,    0.3035 }
				};
			}
			else if (rank == 3)
			{
				return new double[,]
				{
					{ 0.7223,    0.8953,    0.5270,    0.3928,    0.5276,    0.7933,    0.2763,    0.6254,    0.3035,    9.6122 }
				};
			}
			else
			{
				throw new Exception("Only 4 processes");
			}
		}

		public static double[] GetSubX(int rank)
		{
			if (rank == 0)
			{
				return new double[] { 2.6621, 3.5825, 0.8965 };
			}
			else if (rank == 1)
			{
				return new double[] { 1.6827, 0.9386, 1.6096 };
			}
			else if (rank == 2)
			{
				return new double[] { 2.0193, 2.7428, 0.2437 };
			}
			else if (rank == 3)
			{
				return new double[] { 2.7637 };
			}
			else
			{
				throw new Exception("Only 4 processes");
			}
		}

		public static double[] GetSubY(int rank)
		{
			if (rank == 0)
			{
				return new double[] { 32.46268139, 35.53147830, 13.35561918 };
			}
			else if (rank == 1)
			{
				return new double[] { 21.66314277, 18.80200620, 28.54010573 };
			}
			else if (rank == 2)
			{
				return new double[] { 22.68216892, 30.29962567, 10.61705815 };
			}
			else if (rank == 3)
			{
				return new double[] { 36.94824798 };
			}
			else
			{
				throw new Exception("Only 4 processes");
			}
		}

		public static double[] GetSubZ(int rank)
		{
			if (rank == 0)
			{
				return new double[] { 102.71224417, 113.75943490, 41.859857540 };
			}
			else if (rank == 1)
			{
				return new double[] { 68.354828310, 58.283218600, 88.839517190 };
			}
			else if (rank == 2)
			{
				return new double[] { 72.085106760, 96.384477010, 32.338574450 };
			}
			else if (rank == 3)
			{
				return new double[] { 116.37214394 };
			}
			else
			{
				throw new Exception("Only 4 processes");
			}
		}

		public static double[] GetSubInvD(int rank)
		{
			if (rank == 0)
			{
				return new double[] { 0.1121629503342456, 0.13268582650001326, 0.15589679632083561 };
			}
			else if (rank == 1)
			{
				return new double[] { 0.12890584716922759, 0.11003278977135186, 0.094766069956312829 };
			}
			else if (rank == 2)
			{
				return new double[] { 0.13284270095779588, 0.1330813659471401, 0.12740963471657726 };
			}
			else if (rank == 3)
			{
				return new double[] { 0.10403445621189739 };
			}
			else
			{
				throw new Exception("Only 4 processes");
			}
		}
	}
}
